// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MyJson.Controllers;
//
//    var eqx = Eqx.FromJson(jsonString);

namespace MyJson.Controllers
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Eqx
    {
        [JsonProperty("header")]
        public Header Header { get; set; }

        [JsonProperty("content")]
        public Content Content { get; set; }
    }

    public partial class Content
    {
        [JsonProperty("req_data")]
        public ReqData ReqData { get; set; }
    }

    public partial class ReqData
    {
        [JsonProperty("attrib_no")]
        public string AttribNo { get; set; }

        [JsonProperty("attrib_value")]
        public string AttribValue { get; set; }

        [JsonProperty("machine_no")]
        public string MachineNo { get; set; }

        [JsonProperty("plot_no")]
        public string PlotNo { get; set; }

        [JsonProperty("carrier_no")]
        public string CarrierNo { get; set; }

        [JsonProperty("report_datetime")]
        public string ReportDatetime { get; set; }
    }

    public partial class Header
    {
        [JsonProperty("method_fullname")]
        public string MethodFullname { get; set; }

        [JsonProperty("method_version")]
        public string MethodVersion { get; set; }
    }

    public partial class Eqx
    {
        public static Eqx FromJson(string json) => JsonConvert.DeserializeObject<Eqx>(json, MyJson.Controllers.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Eqx self) => JsonConvert.SerializeObject(self, MyJson.Controllers.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
